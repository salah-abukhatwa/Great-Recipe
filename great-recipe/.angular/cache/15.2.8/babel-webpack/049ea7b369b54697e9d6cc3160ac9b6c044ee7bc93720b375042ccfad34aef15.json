{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let DropdownToggleDirective = /*#__PURE__*/(() => {\n  class DropdownToggleDirective {\n    constructor(el, renderer) {\n      this.el = el;\n      this.renderer = renderer;\n    }\n    onClick() {\n      const dropdownMenu = this.el.nativeElement.nextElementSibling;\n      const isMenuOpen = dropdownMenu.classList.contains('show');\n      if (isMenuOpen) {\n        this.renderer.removeClass(dropdownMenu, 'show');\n      } else {\n        this.renderer.addClass(dropdownMenu, 'show');\n      }\n    }\n    onDocumentClick(target) {\n      const dropdownMenu = this.el.nativeElement.nextElementSibling;\n      const clickedInside = this.el.nativeElement.contains(target);\n      if (!clickedInside && dropdownMenu.classList.contains('show')) {\n        this.renderer.removeClass(dropdownMenu, 'show');\n      }\n    }\n  }\n  DropdownToggleDirective.ɵfac = function DropdownToggleDirective_Factory(t) {\n    return new (t || DropdownToggleDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  };\n  DropdownToggleDirective.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n    type: DropdownToggleDirective,\n    selectors: [[\"\", \"appDropdownToggle\", \"\"]],\n    hostBindings: function DropdownToggleDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"click\", function DropdownToggleDirective_click_HostBindingHandler() {\n          return ctx.onClick();\n        })(\"click\", function DropdownToggleDirective_click_HostBindingHandler($event) {\n          return ctx.onDocumentClick($event.target);\n        }, false, i0.ɵɵresolveDocument);\n      }\n    }\n  });\n  return DropdownToggleDirective;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}